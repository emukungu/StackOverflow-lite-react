// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> test App component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Header />,
        <Main />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header />,
          <Main />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the HomeLink snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HomeLink />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "activeClassName": "active",
      "aria-current": "page",
      "children": "Home",
      "className": "home",
      "to": "/home",
    },
    "ref": null,
    "rendered": "Home",
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "activeClassName": "active",
        "aria-current": "page",
        "children": "Home",
        "className": "home",
        "to": "/home",
      },
      "ref": null,
      "rendered": "Home",
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the LoggedInHeader snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoggedInHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <HomeLink />,
        <NavLink
          activeClassName="active"
          aria-current="page"
          className="signupLinks login-link"
          to="/home"
        >
          Logout
        </NavLink>,
      ],
      "className": " navbar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "aria-current": "page",
          "children": "Logout",
          "className": "signupLinks login-link",
          "to": "/home",
        },
        "ref": null,
        "rendered": "Logout",
        "type": [Function],
      },
    ],
    "type": "nav",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <HomeLink />,
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="signupLinks login-link"
            to="/home"
          >
            Logout
          </NavLink>,
        ],
        "className": " navbar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": "Logout",
            "className": "signupLinks login-link",
            "to": "/home",
          },
          "ref": null,
          "rendered": "Logout",
          "type": [Function],
        },
      ],
      "type": "nav",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the Main snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Route
          component={[Function]}
          exact={true}
          path="/"
        />,
        <Route
          component={[Function]}
          path="/signup"
        />,
        <Route
          component={[Function]}
          path="/login"
        />,
        <Route
          component={[Function]}
          path="/questions"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "exact": true,
          "path": "/",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "path": "/signup",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "path": "/login",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "path": "/questions",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />,
          <Route
            component={[Function]}
            path="/signup"
          />,
          <Route
            component={[Function]}
            path="/login"
          />,
          <Route
            component={[Function]}
            path="/questions"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "exact": true,
            "path": "/",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "path": "/signup",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "path": "/login",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "path": "/questions",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the header snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the homeheader snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HomeHeader />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <HomeLink />,
        <NavLink
          activeClassName="active"
          aria-current="page"
          className="signupLinks login-link"
          to="/login"
        >
          Login
        </NavLink>,
        <NavLink
          activeClassName="active"
          aria-current="page"
          className="signupLinks"
          to="/signup"
        >
          Sign Up
        </NavLink>,
      ],
      "className": " navbar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "aria-current": "page",
          "children": "Login",
          "className": "signupLinks login-link",
          "to": "/login",
        },
        "ref": null,
        "rendered": "Login",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "aria-current": "page",
          "children": "Sign Up",
          "className": "signupLinks",
          "to": "/signup",
        },
        "ref": null,
        "rendered": "Sign Up",
        "type": [Function],
      },
    ],
    "type": "nav",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <HomeLink />,
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="signupLinks login-link"
            to="/login"
          >
            Login
          </NavLink>,
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="signupLinks"
            to="/signup"
          >
            Sign Up
          </NavLink>,
        ],
        "className": " navbar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": "Login",
            "className": "signupLinks login-link",
            "to": "/login",
          },
          "ref": null,
          "rendered": "Login",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": "Sign Up",
            "className": "signupLinks",
            "to": "/signup",
          },
          "ref": null,
          "rendered": "Sign Up",
          "type": [Function],
        },
      ],
      "type": "nav",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the login snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginComponent />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="row"
      >
        <div
          className=" col-xs-12 col-md-6"
        >
          <h1>
            StackOverflow-Lite
          </h1>
          <p>
            A platform where people can ask questions and provide answers.
          </p>
        </div>
        <div
          className=" col-xs-12 col-md-6 center-signup"
        >
          <h2>
            LOGIN
          </h2>
          <form
            className="form-boundary"
          >
            <Input
              htmlFor="Username"
              id="username"
              innerHTML="Username"
              name="username"
              placeholder="Username"
              type="text"
            />
            <Input
              htmlFor="Password"
              id="password"
              innerHTML="Password"
              name="password"
              placeholder="Password"
              type="password"
            />
            <button
              className="btn btn-default"
              type="submit"
            >
              Submit
            </button>
          </form>
        </div>
      </div>,
      "className": "container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className=" col-xs-12 col-md-6"
          >
            <h1>
              StackOverflow-Lite
            </h1>
            <p>
              A platform where people can ask questions and provide answers.
            </p>
          </div>,
          <div
            className=" col-xs-12 col-md-6 center-signup"
          >
            <h2>
              LOGIN
            </h2>
            <form
              className="form-boundary"
            >
              <Input
                htmlFor="Username"
                id="username"
                innerHTML="Username"
                name="username"
                placeholder="Username"
                type="text"
              />
              <Input
                htmlFor="Password"
                id="password"
                innerHTML="Password"
                name="password"
                placeholder="Password"
                type="password"
              />
              <button
                className="btn btn-default"
                type="submit"
              >
                Submit
              </button>
            </form>
          </div>,
        ],
        "className": "row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                StackOverflow-Lite
              </h1>,
              <p>
                A platform where people can ask questions and provide answers.
              </p>,
            ],
            "className": " col-xs-12 col-md-6",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "StackOverflow-Lite",
              },
              "ref": null,
              "rendered": "StackOverflow-Lite",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "A platform where people can ask questions and provide answers.",
              },
              "ref": null,
              "rendered": "A platform where people can ask questions and provide answers.",
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                LOGIN
              </h2>,
              <form
                className="form-boundary"
              >
                <Input
                  htmlFor="Username"
                  id="username"
                  innerHTML="Username"
                  name="username"
                  placeholder="Username"
                  type="text"
                />
                <Input
                  htmlFor="Password"
                  id="password"
                  innerHTML="Password"
                  name="password"
                  placeholder="Password"
                  type="password"
                />
                <button
                  className="btn btn-default"
                  type="submit"
                >
                  Submit
                </button>
              </form>,
            ],
            "className": " col-xs-12 col-md-6 center-signup",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "LOGIN",
              },
              "ref": null,
              "rendered": "LOGIN",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Input
                    htmlFor="Username"
                    id="username"
                    innerHTML="Username"
                    name="username"
                    placeholder="Username"
                    type="text"
                  />,
                  <Input
                    htmlFor="Password"
                    id="password"
                    innerHTML="Password"
                    name="password"
                    placeholder="Password"
                    type="password"
                  />,
                  <button
                    className="btn btn-default"
                    type="submit"
                  >
                    Submit
                  </button>,
                ],
                "className": "form-boundary",
                "onSubmit": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "handleChange": undefined,
                    "htmlFor": "Username",
                    "id": "username",
                    "innerHTML": "Username",
                    "name": "username",
                    "placeholder": "Username",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "handleChange": undefined,
                    "htmlFor": "Password",
                    "id": "password",
                    "innerHTML": "Password",
                    "name": "password",
                    "placeholder": "Password",
                    "type": "password",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Submit",
                    "className": "btn btn-default",
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "Submit",
                  "type": "button",
                },
              ],
              "type": "form",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row"
        >
          <div
            className=" col-xs-12 col-md-6"
          >
            <h1>
              StackOverflow-Lite
            </h1>
            <p>
              A platform where people can ask questions and provide answers.
            </p>
          </div>
          <div
            className=" col-xs-12 col-md-6 center-signup"
          >
            <h2>
              LOGIN
            </h2>
            <form
              className="form-boundary"
            >
              <Input
                htmlFor="Username"
                id="username"
                innerHTML="Username"
                name="username"
                placeholder="Username"
                type="text"
              />
              <Input
                htmlFor="Password"
                id="password"
                innerHTML="Password"
                name="password"
                placeholder="Password"
                type="password"
              />
              <button
                className="btn btn-default"
                type="submit"
              >
                Submit
              </button>
            </form>
          </div>
        </div>,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className=" col-xs-12 col-md-6"
            >
              <h1>
                StackOverflow-Lite
              </h1>
              <p>
                A platform where people can ask questions and provide answers.
              </p>
            </div>,
            <div
              className=" col-xs-12 col-md-6 center-signup"
            >
              <h2>
                LOGIN
              </h2>
              <form
                className="form-boundary"
              >
                <Input
                  htmlFor="Username"
                  id="username"
                  innerHTML="Username"
                  name="username"
                  placeholder="Username"
                  type="text"
                />
                <Input
                  htmlFor="Password"
                  id="password"
                  innerHTML="Password"
                  name="password"
                  placeholder="Password"
                  type="password"
                />
                <button
                  className="btn btn-default"
                  type="submit"
                >
                  Submit
                </button>
              </form>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h1>
                  StackOverflow-Lite
                </h1>,
                <p>
                  A platform where people can ask questions and provide answers.
                </p>,
              ],
              "className": " col-xs-12 col-md-6",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "StackOverflow-Lite",
                },
                "ref": null,
                "rendered": "StackOverflow-Lite",
                "type": "h1",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "A platform where people can ask questions and provide answers.",
                },
                "ref": null,
                "rendered": "A platform where people can ask questions and provide answers.",
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  LOGIN
                </h2>,
                <form
                  className="form-boundary"
                >
                  <Input
                    htmlFor="Username"
                    id="username"
                    innerHTML="Username"
                    name="username"
                    placeholder="Username"
                    type="text"
                  />
                  <Input
                    htmlFor="Password"
                    id="password"
                    innerHTML="Password"
                    name="password"
                    placeholder="Password"
                    type="password"
                  />
                  <button
                    className="btn btn-default"
                    type="submit"
                  >
                    Submit
                  </button>
                </form>,
              ],
              "className": " col-xs-12 col-md-6 center-signup",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "LOGIN",
                },
                "ref": null,
                "rendered": "LOGIN",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Input
                      htmlFor="Username"
                      id="username"
                      innerHTML="Username"
                      name="username"
                      placeholder="Username"
                      type="text"
                    />,
                    <Input
                      htmlFor="Password"
                      id="password"
                      innerHTML="Password"
                      name="password"
                      placeholder="Password"
                      type="password"
                    />,
                    <button
                      className="btn btn-default"
                      type="submit"
                    >
                      Submit
                    </button>,
                  ],
                  "className": "form-boundary",
                  "onSubmit": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "handleChange": undefined,
                      "htmlFor": "Username",
                      "id": "username",
                      "innerHTML": "Username",
                      "name": "username",
                      "placeholder": "Username",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "handleChange": undefined,
                      "htmlFor": "Password",
                      "id": "password",
                      "innerHTML": "Password",
                      "name": "password",
                      "placeholder": "Password",
                      "type": "password",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Submit",
                      "className": "btn btn-default",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "Submit",
                    "type": "button",
                  },
                ],
                "type": "form",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<App /> tests the signup snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SignupComponent />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="row"
      >
        <div
          className=" col-xs-12 col-md-6"
        >
          <h1>
            StackOverflow-Lite
          </h1>
          <p>
            A platform where people can ask questions and provide answers.
          </p>
        </div>
        <div
          className=" col-xs-12 col-md-6 center-signup"
        >
          <h2>
            SIGN UP
          </h2>
          <form>
            <Input
              htmlFor="Username"
              id="username"
              innerHTML="Username"
              name="username"
              placeholder="Username"
              type="text"
            />
            <Input
              htmlFor="Email"
              id="email"
              innerHTML="Email"
              name="email"
              placeholder="Email"
              type="email"
            />
            <Input
              htmlFor="Password"
              id="password"
              innerHTML="Password"
              name="password"
              placeholder="Password"
              type="password"
            />
            <button
              className="btn btn-default"
              type="submit"
            >
               Submit 
            </button>
          </form>
        </div>
      </div>,
      "className": "container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className=" col-xs-12 col-md-6"
          >
            <h1>
              StackOverflow-Lite
            </h1>
            <p>
              A platform where people can ask questions and provide answers.
            </p>
          </div>,
          <div
            className=" col-xs-12 col-md-6 center-signup"
          >
            <h2>
              SIGN UP
            </h2>
            <form>
              <Input
                htmlFor="Username"
                id="username"
                innerHTML="Username"
                name="username"
                placeholder="Username"
                type="text"
              />
              <Input
                htmlFor="Email"
                id="email"
                innerHTML="Email"
                name="email"
                placeholder="Email"
                type="email"
              />
              <Input
                htmlFor="Password"
                id="password"
                innerHTML="Password"
                name="password"
                placeholder="Password"
                type="password"
              />
              <button
                className="btn btn-default"
                type="submit"
              >
                 Submit 
              </button>
            </form>
          </div>,
        ],
        "className": "row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                StackOverflow-Lite
              </h1>,
              <p>
                A platform where people can ask questions and provide answers.
              </p>,
            ],
            "className": " col-xs-12 col-md-6",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "StackOverflow-Lite",
              },
              "ref": null,
              "rendered": "StackOverflow-Lite",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "A platform where people can ask questions and provide answers.",
              },
              "ref": null,
              "rendered": "A platform where people can ask questions and provide answers.",
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                SIGN UP
              </h2>,
              <form>
                <Input
                  htmlFor="Username"
                  id="username"
                  innerHTML="Username"
                  name="username"
                  placeholder="Username"
                  type="text"
                />
                <Input
                  htmlFor="Email"
                  id="email"
                  innerHTML="Email"
                  name="email"
                  placeholder="Email"
                  type="email"
                />
                <Input
                  htmlFor="Password"
                  id="password"
                  innerHTML="Password"
                  name="password"
                  placeholder="Password"
                  type="password"
                />
                <button
                  className="btn btn-default"
                  type="submit"
                >
                   Submit 
                </button>
              </form>,
            ],
            "className": " col-xs-12 col-md-6 center-signup",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "SIGN UP",
              },
              "ref": null,
              "rendered": "SIGN UP",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Input
                    htmlFor="Username"
                    id="username"
                    innerHTML="Username"
                    name="username"
                    placeholder="Username"
                    type="text"
                  />,
                  <Input
                    htmlFor="Email"
                    id="email"
                    innerHTML="Email"
                    name="email"
                    placeholder="Email"
                    type="email"
                  />,
                  <Input
                    htmlFor="Password"
                    id="password"
                    innerHTML="Password"
                    name="password"
                    placeholder="Password"
                    type="password"
                  />,
                  <button
                    className="btn btn-default"
                    type="submit"
                  >
                     Submit 
                  </button>,
                ],
                "onSubmit": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "handleChange": undefined,
                    "htmlFor": "Username",
                    "id": "username",
                    "innerHTML": "Username",
                    "name": "username",
                    "placeholder": "Username",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "handleChange": undefined,
                    "htmlFor": "Email",
                    "id": "email",
                    "innerHTML": "Email",
                    "name": "email",
                    "placeholder": "Email",
                    "type": "email",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "handleChange": undefined,
                    "htmlFor": "Password",
                    "id": "password",
                    "innerHTML": "Password",
                    "name": "password",
                    "placeholder": "Password",
                    "type": "password",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " Submit ",
                    "className": "btn btn-default",
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": " Submit ",
                  "type": "button",
                },
              ],
              "type": "form",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row"
        >
          <div
            className=" col-xs-12 col-md-6"
          >
            <h1>
              StackOverflow-Lite
            </h1>
            <p>
              A platform where people can ask questions and provide answers.
            </p>
          </div>
          <div
            className=" col-xs-12 col-md-6 center-signup"
          >
            <h2>
              SIGN UP
            </h2>
            <form>
              <Input
                htmlFor="Username"
                id="username"
                innerHTML="Username"
                name="username"
                placeholder="Username"
                type="text"
              />
              <Input
                htmlFor="Email"
                id="email"
                innerHTML="Email"
                name="email"
                placeholder="Email"
                type="email"
              />
              <Input
                htmlFor="Password"
                id="password"
                innerHTML="Password"
                name="password"
                placeholder="Password"
                type="password"
              />
              <button
                className="btn btn-default"
                type="submit"
              >
                 Submit 
              </button>
            </form>
          </div>
        </div>,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className=" col-xs-12 col-md-6"
            >
              <h1>
                StackOverflow-Lite
              </h1>
              <p>
                A platform where people can ask questions and provide answers.
              </p>
            </div>,
            <div
              className=" col-xs-12 col-md-6 center-signup"
            >
              <h2>
                SIGN UP
              </h2>
              <form>
                <Input
                  htmlFor="Username"
                  id="username"
                  innerHTML="Username"
                  name="username"
                  placeholder="Username"
                  type="text"
                />
                <Input
                  htmlFor="Email"
                  id="email"
                  innerHTML="Email"
                  name="email"
                  placeholder="Email"
                  type="email"
                />
                <Input
                  htmlFor="Password"
                  id="password"
                  innerHTML="Password"
                  name="password"
                  placeholder="Password"
                  type="password"
                />
                <button
                  className="btn btn-default"
                  type="submit"
                >
                   Submit 
                </button>
              </form>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h1>
                  StackOverflow-Lite
                </h1>,
                <p>
                  A platform where people can ask questions and provide answers.
                </p>,
              ],
              "className": " col-xs-12 col-md-6",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "StackOverflow-Lite",
                },
                "ref": null,
                "rendered": "StackOverflow-Lite",
                "type": "h1",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "A platform where people can ask questions and provide answers.",
                },
                "ref": null,
                "rendered": "A platform where people can ask questions and provide answers.",
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  SIGN UP
                </h2>,
                <form>
                  <Input
                    htmlFor="Username"
                    id="username"
                    innerHTML="Username"
                    name="username"
                    placeholder="Username"
                    type="text"
                  />
                  <Input
                    htmlFor="Email"
                    id="email"
                    innerHTML="Email"
                    name="email"
                    placeholder="Email"
                    type="email"
                  />
                  <Input
                    htmlFor="Password"
                    id="password"
                    innerHTML="Password"
                    name="password"
                    placeholder="Password"
                    type="password"
                  />
                  <button
                    className="btn btn-default"
                    type="submit"
                  >
                     Submit 
                  </button>
                </form>,
              ],
              "className": " col-xs-12 col-md-6 center-signup",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "SIGN UP",
                },
                "ref": null,
                "rendered": "SIGN UP",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Input
                      htmlFor="Username"
                      id="username"
                      innerHTML="Username"
                      name="username"
                      placeholder="Username"
                      type="text"
                    />,
                    <Input
                      htmlFor="Email"
                      id="email"
                      innerHTML="Email"
                      name="email"
                      placeholder="Email"
                      type="email"
                    />,
                    <Input
                      htmlFor="Password"
                      id="password"
                      innerHTML="Password"
                      name="password"
                      placeholder="Password"
                      type="password"
                    />,
                    <button
                      className="btn btn-default"
                      type="submit"
                    >
                       Submit 
                    </button>,
                  ],
                  "onSubmit": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "handleChange": undefined,
                      "htmlFor": "Username",
                      "id": "username",
                      "innerHTML": "Username",
                      "name": "username",
                      "placeholder": "Username",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "handleChange": undefined,
                      "htmlFor": "Email",
                      "id": "email",
                      "innerHTML": "Email",
                      "name": "email",
                      "placeholder": "Email",
                      "type": "email",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "handleChange": undefined,
                      "htmlFor": "Password",
                      "id": "password",
                      "innerHTML": "Password",
                      "name": "password",
                      "placeholder": "Password",
                      "type": "password",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Submit ",
                      "className": "btn btn-default",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": " Submit ",
                    "type": "button",
                  },
                ],
                "type": "form",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
